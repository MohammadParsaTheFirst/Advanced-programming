We want to create a calculator that assigns a name to each number and performs operations using the names of the numbers!

In coding, natural numbers are limited. In this problem, we aim to eliminate this limitation. To achieve this, we want to use strings! Specifically, we want to design an algorithm that, when we add two strings like "123" and "456," gives the result "579"! We want to do the same for multiplication as well. For an organized implementation, define a class HugeInt and provide it with a string number. Implement the other required functions in this class!

Code Functionality
Creating a Number
Input: create <name> as <type> <number> Here, <name> is the name of the number, <type> specifies the type of the number (Binary, Decimal, Hexadecimal), and <number> is simply the number!

(Note that characters A-F can also participate and are considered numbers.)

Output: <name> as <type> is <number>

Adding Two Numbers
Input: <name1> + <name2> in <name3> Here, numbers <name1> and <name2> should be added, and the result should be stored in <name3>.

Note that if <name3> was not previously defined, it can be defined here!

The types of the two numbers are not guaranteed to be the same! If the types of the two numbers differ, or if either of the first two numbers does not exist, print nothing.

Output: <name3> as <type3> is <number3>

Multiplying Two Numbers
Input: <name1> * <name2> in <name3> Here, numbers <name1> and <name2> should be multiplied, and the result should be stored in <name3>.

Note that if <name3> was not previously defined, it can be defined here!

The types of the two numbers are not guaranteed to be the same! If the types of the two numbers differ, or if either of the first two numbers does not exist, print nothing.

Output: <name3> as <type3> is <number3>

Ending the Program
The program ends when it receives: end

Sample Test Case
Input:

create a as Hexadecimal 77628A2  
create b as Decimal 268447480370521590232223209  
create c as Decimal 8285395131541  
create d as Hexadecimal 89A7671D5D0D0AFD3A812  
create f as Binary 111000011010111000010  
b + c in g  
a * d in h  
a * a in i  
end  
Output:

a as Hexadecimal is 77628A2  
b as Decimal is 268447480370521590232223209  
c as Decimal is 8285395131541  
d as Hexadecimal is 89A7671D5D0D0AFD3A812  
f as Binary is 111000011010111000010  
g as Decimal is 268447480370529875627354750  
h as Hexadecimal is 4031CD49920166EE94B04C7F2B64  
i as Hexadecimal is 37ACC257CB0684  
